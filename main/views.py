from django.http import JsonResponse
from math import ceil
import numpy as np
from django.views.decorators.csrf import csrf_exempt

# Create your views here.
column_matrix = np.array([[2,3,1,1],
                          [1,2,3,1],
                          [1,1,2,3],
                          [3,1,1,2]], dtype = "int16")
reverse_column_matrix = np.array([[14,11,13,9],
                                  [9,14,11,13],
                                  [13,9,14,11],
                                  [11, 13, 9, 14]], dtype = "int16")
s_box = np.array([[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
                  [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
                  [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
                  [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
                  [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
                  [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
                  [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
                  [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
                  [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
                  [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
                  [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
                  [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
                  [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
                  [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
                  [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
                  [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16], ], dtype = "int16")
reverse_s_box = np.array([[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
                          [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
                          [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
                          [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
                          [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
                          [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
                          [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
                          [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
                          [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
                          [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
                          [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
                          [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
                          [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
                          [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
                          [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
                          [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d], ], dtype = "int16")


def cap(number):
    if number < 0 or number >= 256:
        number = number % 256
    if number >= 128:
        number ^= 0b1000111
    return number


def substitute_char(char, box=s_box):
    column = char % 16
    row = int((char-column) / 16)
    return box[row, column]

def substitute_message(message, box=s_box):
    for col in message:
        for i in range(len(col)):
            col[i] = substitute_char(col[i], box)
    return message

def generate_rcon():
    rcon = [1]
    for i in range(12):
        rcon.append(cap(rcon[i]*2))
    return rcon

rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171]


def create_key():
    file = open("key", encoding="utf8").read()
    key = list()
    key_row = list()
    for i in range(int(len(file)/8)):
        key_row.append(int(file[8*i:8*i+8],2))
        if len(key_row) == 4:
            key.append(key_row)
            key_row = list()
    
    for round in range(13):
        
        for i in range(4):
            col = key[round*4+i+7]
            if i == 0:
                
                col = [col[1], col[2], col[3], col[0]]
                
                for j in range(4):
                    col[j] = substitute_char(col[j])
                    col[j] ^= key[round*4+i][j]
                
                col[0] = col[0] ^ rcon[round]
            else:
                col[j] ^= key[round*4+i][j]
            key.append(col)
    return np.array(key, dtype="uint8")

def text_to_table(text):
    table = list()
    l = len(text)%16
    if l > 0:
        text = text + " "*(16-l)
    for i in range(int(len(text)/4)):
        col = list()
        for j in range(4):
            col.append(ord(text[i*4+j]))
        table.append(col)
    return np.array(table, dtype="uint8")


def xor_block(block, block2):
    for row in range(block.shape[0]):
        for column in range(block.shape[1]):
            block[row, column] = block[row, column] ^ block2[row, column]
    return block

def add_key_to_message(message, key, round):
    key = key[4*round:4*round+4]
    for i in range(int(len(message)/4)):
        message[i*4:i*4+4] = xor_block(message[i*4:i*4+4], key)
    return message
    
def shift_rows(message, inverse=False):
    multiplier = 1
    if inverse:
        multiplier = -1
    for i in range(int(len(message)/4)):
        block = message[i*4:i*4+4]
        for j in range(4):
            block[:,j] = np.roll(block[:,j], -j*multiplier)
    return message


def modulo2_multiply(a, b):
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        if hi_bit_set:
            a ^= 0x1b
        b >>= 1
    return p % 256


def multiply_column_by_matrix(column, matrix):
    new_column = np.zeros((4), dtype="uint8")
    for row in range(4):
        for col in range(4):
            new_column[row] ^= modulo2_multiply(column[col], matrix[row, col])
    return new_column


def multiply_message_by_matrix(message, matrix):
    for i in range(int(len(message)/4)):
        block = message[i*4:i*4+4]
        for j in range(4):
            block[j] = multiply_column_by_matrix(block[j], matrix)
    return message


@csrf_exempt
def cipher_file(request):
    if request.method != "POST":
        return JsonResponse({"message": "forbidden method"})

    response = dict()
    response["file"] = str()
    key = create_key()

    print(request.POST)

    text = request.body.decode("ascii")
    
    message = text_to_table(text)
    
    message = add_key_to_message(message, key, 0)
    for round in range(14):
        message = substitute_message(message)
        message = shift_rows(message)
        if round < 13:
            message = multiply_message_by_matrix(message, column_matrix)    
        message = add_key_to_message(message, key, round)
    for i in range(len(message)):
        for j in range(len(message[i])):
            char_2 = message[i, j]%16
            char_1 = int((message[i, j]-char_2)/16)
            response["file"] += hex(char_1)[2:] + hex(char_2)[2:]
    
    return JsonResponse(response)


@csrf_exempt
def decipher_file(request):
    if request.method != "POST":
        return JsonResponse({"message": "forbidden method"})

    response = dict()
    response["file"] = str()

    key = create_key()

    text = request.body.decode("utf8")
    new_text = list()
    col = list()
    counter = 0
    for i in range(int(len(text)/2)):
        char_2 = int(text[i*2+1],16)
        char_1 = int(text[i*2],16)
        col.append(char_2+char_1*16)
        counter += 1
        if counter == 4:
            new_text.append(col)
            col = list()
            counter = 0
    message = np.array(new_text, dtype="uint8")
    
    for round in range(14):
        round = 13-round
        message = add_key_to_message(message, key, round)
        if round < 13:
            message = multiply_message_by_matrix(message, reverse_column_matrix)
        message = shift_rows(message, True)
        message = substitute_message(message, reverse_s_box)
    message = add_key_to_message(message, key, 0)

    for i in range(len(message)):
        for j in range(len(message[i])):
            response["file"] += chr(message[i, j])
    response["file"] = response["file"].strip()
    return JsonResponse(response)
